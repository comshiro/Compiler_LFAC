Types:
int, float, char, string, bool, long, double, func
(+ *)

arrays:
[type] [id];
[type] [id] := (assign) {a,b,c,f};
[type] [id] := (assign) a;
[id][index]
*a == a[0] ?
*a=**b; (limbajul sa permita asta)

classes
-
'public'/'protected'/'private' class' A
{ };

'public'/'protected'/'private' class' A : 'public'/'protected'/'private' B
{ };

constructor

A () - default
A(a,b,c)
A({d,f,a})
A(*a)
~A();
~A(a,b,c);

A.val doar punct

static x;

x:: - sa ma uit la exemple OOP

std::cout - accesing a member of a class
A.val -accesing a member of an object

Animal a; -call constructor defsult
Animal* a = Animal (param);

-------------------------------
type id (param)/({})
{}; //optional

type id(param);

de vazut higher order functions

if(condition)
{};

while()
{};

Exp:= 
|const
|var
|e + e/-
|e*e/'\'
|(e)
|%


tema.l - notatie var/func/struct

Bexp :=
|&&
|||
|!
|>/</=/<=/=>
|true
|false

Print(expr) - ce face pRINT?
Type(expr)

Program: classes_section glo_var_sec func_defs _main_body

main_body:

type main () {

return type;
}
 
/.main a f b








